/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_FAULTIER_PB_H_INCLUDED
#define PB_FAULTIER_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _FaultierVersion {
    FaultierVersion_FAULTIER_VERSION_ZERO = 0,
    FaultierVersion_FAULTIER_VERSION = 1
} FaultierVersion;

typedef enum _Commands {
    Commands_CMD_RESET = 0,
    Commands_CMD_GLITCH = 1,
    Commands_CMD_CAPTURE = 2
} Commands;

typedef enum _TriggerSource {
    TriggerSource_TRIGGER_IN_NONE = 0,
    TriggerSource_TRIGGER_IN_EXT0 = 1,
    TriggerSource_TRIGGER_IN_EXT1 = 2
} TriggerSource;

typedef enum _GlitchOutput {
    GlitchOutput_OUT_CROWBAR = 0,
    GlitchOutput_OUT_MUX0 = 1,
    GlitchOutput_OUT_MUX1 = 2,
    GlitchOutput_OUT_MUX2 = 3,
    GlitchOutput_OUT_EXT0 = 4,
    GlitchOutput_OUT_EXT1 = 5,
    GlitchOutput_OUT_NONE = 6
} GlitchOutput;

typedef enum _TriggersType {
    TriggersType_TRIGGER_NONE = 0,
    TriggersType_TRIGGER_HIGH = 1,
    TriggersType_TRIGGER_LOW = 2,
    TriggersType_TRIGGER_RISING_EDGE = 3,
    TriggersType_TRIGGER_FALLING_EDGE = 4,
    TriggersType_TRIGGER_PULSE_POSITIVE = 5,
    TriggersType_TRIGGER_PULSE_NEGATIVE = 6
} TriggersType;

typedef enum _ADCSource {
    ADCSource_ADC_CROWBAR = 0,
    ADCSource_ADC_MUX0 = 1,
    ADCSource_ADC_EXT1 = 2
} ADCSource;

typedef enum _AuxFunction {
    AuxFunction_AUX_NONE = 0,
    AuxFunction_AUX_UART = 1,
    AuxFunction_AUX_SWD_CHECKER = 2,
    AuxFunction_AUX_SWD_PROBE = 3
} AuxFunction;

typedef enum _SWDCheckFunction {
    SWDCheckFunction_SWD_CHECK_ENABLED = 0,
    SWDCheckFunction_SWD_CHECK_NRF52 = 1
} SWDCheckFunction;

typedef enum _TriggerPullConfiguration {
    TriggerPullConfiguration_TRIGGER_PULL_NONE = 0,
    TriggerPullConfiguration_TRIGGER_PULL_UP = 1,
    TriggerPullConfiguration_TRIGGER_PULL_DOWN = 2
} TriggerPullConfiguration;

/* Struct definitions */
typedef struct _CaptureResponse {
    pb_callback_t data;
} CaptureResponse;

typedef struct _CommandHello {
    char dummy_field;
} CommandHello;

typedef struct _CommandCapture {
    char dummy_field;
} CommandCapture;

typedef struct _CommandGlitch {
    char dummy_field;
} CommandGlitch;

typedef struct _CommandSWDCheck {
    SWDCheckFunction function;
} CommandSWDCheck;

typedef struct _CommandConfigureGlitcher {
    TriggersType trigger_type;
    int32_t delay;
    int32_t pulse;
    TriggerSource trigger_source;
    GlitchOutput glitch_output;
    TriggerPullConfiguration trigger_pull_configuration;
    GlitchOutput power_cycle_output;
    int32_t power_cycle_length;
} CommandConfigureGlitcher;

typedef struct _CommandConfigureADC {
    ADCSource source;
    int32_t sample_count;
} CommandConfigureADC;

typedef struct _CommandReadADC {
    char dummy_field;
} CommandReadADC;

typedef struct _Command {
    pb_size_t which_cmd;
    union {
        CommandHello hello;
        CommandConfigureGlitcher configure_glitcher;
        CommandConfigureADC configure_adc;
        CommandCapture capture;
        CommandGlitch glitch;
        CommandReadADC read_adc;
        CommandSWDCheck swd_check;
    } cmd;
} Command;

typedef struct _ResponseOk {
    char dummy_field;
} ResponseOk;

typedef struct _ResponseError {
    char message[50];
} ResponseError;

typedef struct _ResponseHello {
    FaultierVersion version;
} ResponseHello;

typedef struct _ResponseTriggerTimeout {
    char dummy_field;
} ResponseTriggerTimeout;

typedef struct _ResponseADC {
    pb_callback_t samples; /* int32 test = 2; */
} ResponseADC;

typedef struct _ResponseInfo {
    int32_t frequency;
} ResponseInfo;

typedef struct _ResponseSWDCheck {
    bool enabled;
} ResponseSWDCheck;

typedef struct _Response {
    pb_size_t which_type;
    union {
        ResponseOk ok;
        ResponseError error;
        ResponseHello hello;
        ResponseADC adc;
        ResponseTriggerTimeout trigger_timeout;
        ResponseSWDCheck swd_check;
    } type;
} Response;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _FaultierVersion_MIN FaultierVersion_FAULTIER_VERSION_ZERO
#define _FaultierVersion_MAX FaultierVersion_FAULTIER_VERSION
#define _FaultierVersion_ARRAYSIZE ((FaultierVersion)(FaultierVersion_FAULTIER_VERSION+1))

#define _Commands_MIN Commands_CMD_RESET
#define _Commands_MAX Commands_CMD_CAPTURE
#define _Commands_ARRAYSIZE ((Commands)(Commands_CMD_CAPTURE+1))

#define _TriggerSource_MIN TriggerSource_TRIGGER_IN_NONE
#define _TriggerSource_MAX TriggerSource_TRIGGER_IN_EXT1
#define _TriggerSource_ARRAYSIZE ((TriggerSource)(TriggerSource_TRIGGER_IN_EXT1+1))

#define _GlitchOutput_MIN GlitchOutput_OUT_CROWBAR
#define _GlitchOutput_MAX GlitchOutput_OUT_NONE
#define _GlitchOutput_ARRAYSIZE ((GlitchOutput)(GlitchOutput_OUT_NONE+1))

#define _TriggersType_MIN TriggersType_TRIGGER_NONE
#define _TriggersType_MAX TriggersType_TRIGGER_PULSE_NEGATIVE
#define _TriggersType_ARRAYSIZE ((TriggersType)(TriggersType_TRIGGER_PULSE_NEGATIVE+1))

#define _ADCSource_MIN ADCSource_ADC_CROWBAR
#define _ADCSource_MAX ADCSource_ADC_EXT1
#define _ADCSource_ARRAYSIZE ((ADCSource)(ADCSource_ADC_EXT1+1))

#define _AuxFunction_MIN AuxFunction_AUX_NONE
#define _AuxFunction_MAX AuxFunction_AUX_SWD_PROBE
#define _AuxFunction_ARRAYSIZE ((AuxFunction)(AuxFunction_AUX_SWD_PROBE+1))

#define _SWDCheckFunction_MIN SWDCheckFunction_SWD_CHECK_ENABLED
#define _SWDCheckFunction_MAX SWDCheckFunction_SWD_CHECK_NRF52
#define _SWDCheckFunction_ARRAYSIZE ((SWDCheckFunction)(SWDCheckFunction_SWD_CHECK_NRF52+1))

#define _TriggerPullConfiguration_MIN TriggerPullConfiguration_TRIGGER_PULL_NONE
#define _TriggerPullConfiguration_MAX TriggerPullConfiguration_TRIGGER_PULL_DOWN
#define _TriggerPullConfiguration_ARRAYSIZE ((TriggerPullConfiguration)(TriggerPullConfiguration_TRIGGER_PULL_DOWN+1))





#define CommandSWDCheck_function_ENUMTYPE SWDCheckFunction

#define CommandConfigureGlitcher_trigger_type_ENUMTYPE TriggersType
#define CommandConfigureGlitcher_trigger_source_ENUMTYPE TriggerSource
#define CommandConfigureGlitcher_glitch_output_ENUMTYPE GlitchOutput
#define CommandConfigureGlitcher_trigger_pull_configuration_ENUMTYPE TriggerPullConfiguration
#define CommandConfigureGlitcher_power_cycle_output_ENUMTYPE GlitchOutput

#define CommandConfigureADC_source_ENUMTYPE ADCSource





#define ResponseHello_version_ENUMTYPE FaultierVersion







/* Initializer values for message structs */
#define CaptureResponse_init_default             {{{NULL}, NULL}}
#define CommandHello_init_default                {0}
#define CommandCapture_init_default              {0}
#define CommandGlitch_init_default               {0}
#define CommandSWDCheck_init_default             {_SWDCheckFunction_MIN}
#define CommandConfigureGlitcher_init_default    {_TriggersType_MIN, 0, 0, _TriggerSource_MIN, _GlitchOutput_MIN, _TriggerPullConfiguration_MIN, _GlitchOutput_MIN, 0}
#define CommandConfigureADC_init_default         {_ADCSource_MIN, 0}
#define CommandReadADC_init_default              {0}
#define Command_init_default                     {0, {CommandHello_init_default}}
#define ResponseOk_init_default                  {0}
#define ResponseError_init_default               {""}
#define ResponseHello_init_default               {_FaultierVersion_MIN}
#define ResponseTriggerTimeout_init_default      {0}
#define ResponseADC_init_default                 {{{NULL}, NULL}}
#define ResponseInfo_init_default                {0}
#define ResponseSWDCheck_init_default            {0}
#define Response_init_default                    {0, {ResponseOk_init_default}}
#define CaptureResponse_init_zero                {{{NULL}, NULL}}
#define CommandHello_init_zero                   {0}
#define CommandCapture_init_zero                 {0}
#define CommandGlitch_init_zero                  {0}
#define CommandSWDCheck_init_zero                {_SWDCheckFunction_MIN}
#define CommandConfigureGlitcher_init_zero       {_TriggersType_MIN, 0, 0, _TriggerSource_MIN, _GlitchOutput_MIN, _TriggerPullConfiguration_MIN, _GlitchOutput_MIN, 0}
#define CommandConfigureADC_init_zero            {_ADCSource_MIN, 0}
#define CommandReadADC_init_zero                 {0}
#define Command_init_zero                        {0, {CommandHello_init_zero}}
#define ResponseOk_init_zero                     {0}
#define ResponseError_init_zero                  {""}
#define ResponseHello_init_zero                  {_FaultierVersion_MIN}
#define ResponseTriggerTimeout_init_zero         {0}
#define ResponseADC_init_zero                    {{{NULL}, NULL}}
#define ResponseInfo_init_zero                   {0}
#define ResponseSWDCheck_init_zero               {0}
#define Response_init_zero                       {0, {ResponseOk_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define CaptureResponse_data_tag                 1
#define CommandSWDCheck_function_tag             1
#define CommandConfigureGlitcher_trigger_type_tag 1
#define CommandConfigureGlitcher_delay_tag       2
#define CommandConfigureGlitcher_pulse_tag       3
#define CommandConfigureGlitcher_trigger_source_tag 4
#define CommandConfigureGlitcher_glitch_output_tag 5
#define CommandConfigureGlitcher_trigger_pull_configuration_tag 6
#define CommandConfigureGlitcher_power_cycle_output_tag 7
#define CommandConfigureGlitcher_power_cycle_length_tag 8
#define CommandConfigureADC_source_tag           1
#define CommandConfigureADC_sample_count_tag     2
#define Command_hello_tag                        1
#define Command_configure_glitcher_tag           2
#define Command_configure_adc_tag                3
#define Command_capture_tag                      4
#define Command_glitch_tag                       5
#define Command_read_adc_tag                     6
#define Command_swd_check_tag                    7
#define ResponseError_message_tag                1
#define ResponseHello_version_tag                1
#define ResponseADC_samples_tag                  1
#define ResponseInfo_frequency_tag               1
#define ResponseSWDCheck_enabled_tag             1
#define Response_ok_tag                          1
#define Response_error_tag                       2
#define Response_hello_tag                       3
#define Response_adc_tag                         4
#define Response_trigger_timeout_tag             5
#define Response_swd_check_tag                   6

/* Struct field encoding specification for nanopb */
#define CaptureResponse_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    data,              1)
#define CaptureResponse_CALLBACK pb_default_field_callback
#define CaptureResponse_DEFAULT NULL

#define CommandHello_FIELDLIST(X, a) \

#define CommandHello_CALLBACK NULL
#define CommandHello_DEFAULT NULL

#define CommandCapture_FIELDLIST(X, a) \

#define CommandCapture_CALLBACK NULL
#define CommandCapture_DEFAULT NULL

#define CommandGlitch_FIELDLIST(X, a) \

#define CommandGlitch_CALLBACK NULL
#define CommandGlitch_DEFAULT NULL

#define CommandSWDCheck_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    function,          1)
#define CommandSWDCheck_CALLBACK NULL
#define CommandSWDCheck_DEFAULT NULL

#define CommandConfigureGlitcher_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    trigger_type,      1) \
X(a, STATIC,   SINGULAR, INT32,    delay,             2) \
X(a, STATIC,   SINGULAR, INT32,    pulse,             3) \
X(a, STATIC,   SINGULAR, UENUM,    trigger_source,    4) \
X(a, STATIC,   SINGULAR, UENUM,    glitch_output,     5) \
X(a, STATIC,   SINGULAR, UENUM,    trigger_pull_configuration,   6) \
X(a, STATIC,   SINGULAR, UENUM,    power_cycle_output,   7) \
X(a, STATIC,   SINGULAR, INT32,    power_cycle_length,   8)
#define CommandConfigureGlitcher_CALLBACK NULL
#define CommandConfigureGlitcher_DEFAULT NULL

#define CommandConfigureADC_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    source,            1) \
X(a, STATIC,   SINGULAR, INT32,    sample_count,      2)
#define CommandConfigureADC_CALLBACK NULL
#define CommandConfigureADC_DEFAULT NULL

#define CommandReadADC_FIELDLIST(X, a) \

#define CommandReadADC_CALLBACK NULL
#define CommandReadADC_DEFAULT NULL

#define Command_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (cmd,hello,cmd.hello),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (cmd,configure_glitcher,cmd.configure_glitcher),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (cmd,configure_adc,cmd.configure_adc),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (cmd,capture,cmd.capture),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (cmd,glitch,cmd.glitch),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (cmd,read_adc,cmd.read_adc),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (cmd,swd_check,cmd.swd_check),   7)
#define Command_CALLBACK NULL
#define Command_DEFAULT NULL
#define Command_cmd_hello_MSGTYPE CommandHello
#define Command_cmd_configure_glitcher_MSGTYPE CommandConfigureGlitcher
#define Command_cmd_configure_adc_MSGTYPE CommandConfigureADC
#define Command_cmd_capture_MSGTYPE CommandCapture
#define Command_cmd_glitch_MSGTYPE CommandGlitch
#define Command_cmd_read_adc_MSGTYPE CommandReadADC
#define Command_cmd_swd_check_MSGTYPE CommandSWDCheck

#define ResponseOk_FIELDLIST(X, a) \

#define ResponseOk_CALLBACK NULL
#define ResponseOk_DEFAULT NULL

#define ResponseError_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   message,           1)
#define ResponseError_CALLBACK NULL
#define ResponseError_DEFAULT NULL

#define ResponseHello_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    version,           1)
#define ResponseHello_CALLBACK NULL
#define ResponseHello_DEFAULT NULL

#define ResponseTriggerTimeout_FIELDLIST(X, a) \

#define ResponseTriggerTimeout_CALLBACK NULL
#define ResponseTriggerTimeout_DEFAULT NULL

#define ResponseADC_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    samples,           1)
#define ResponseADC_CALLBACK pb_default_field_callback
#define ResponseADC_DEFAULT NULL

#define ResponseInfo_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    frequency,         1)
#define ResponseInfo_CALLBACK NULL
#define ResponseInfo_DEFAULT NULL

#define ResponseSWDCheck_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1)
#define ResponseSWDCheck_CALLBACK NULL
#define ResponseSWDCheck_DEFAULT NULL

#define Response_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,ok,type.ok),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,error,type.error),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,hello,type.hello),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,adc,type.adc),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,trigger_timeout,type.trigger_timeout),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,swd_check,type.swd_check),   6)
#define Response_CALLBACK NULL
#define Response_DEFAULT NULL
#define Response_type_ok_MSGTYPE ResponseOk
#define Response_type_error_MSGTYPE ResponseError
#define Response_type_hello_MSGTYPE ResponseHello
#define Response_type_adc_MSGTYPE ResponseADC
#define Response_type_trigger_timeout_MSGTYPE ResponseTriggerTimeout
#define Response_type_swd_check_MSGTYPE ResponseSWDCheck

extern const pb_msgdesc_t CaptureResponse_msg;
extern const pb_msgdesc_t CommandHello_msg;
extern const pb_msgdesc_t CommandCapture_msg;
extern const pb_msgdesc_t CommandGlitch_msg;
extern const pb_msgdesc_t CommandSWDCheck_msg;
extern const pb_msgdesc_t CommandConfigureGlitcher_msg;
extern const pb_msgdesc_t CommandConfigureADC_msg;
extern const pb_msgdesc_t CommandReadADC_msg;
extern const pb_msgdesc_t Command_msg;
extern const pb_msgdesc_t ResponseOk_msg;
extern const pb_msgdesc_t ResponseError_msg;
extern const pb_msgdesc_t ResponseHello_msg;
extern const pb_msgdesc_t ResponseTriggerTimeout_msg;
extern const pb_msgdesc_t ResponseADC_msg;
extern const pb_msgdesc_t ResponseInfo_msg;
extern const pb_msgdesc_t ResponseSWDCheck_msg;
extern const pb_msgdesc_t Response_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CaptureResponse_fields &CaptureResponse_msg
#define CommandHello_fields &CommandHello_msg
#define CommandCapture_fields &CommandCapture_msg
#define CommandGlitch_fields &CommandGlitch_msg
#define CommandSWDCheck_fields &CommandSWDCheck_msg
#define CommandConfigureGlitcher_fields &CommandConfigureGlitcher_msg
#define CommandConfigureADC_fields &CommandConfigureADC_msg
#define CommandReadADC_fields &CommandReadADC_msg
#define Command_fields &Command_msg
#define ResponseOk_fields &ResponseOk_msg
#define ResponseError_fields &ResponseError_msg
#define ResponseHello_fields &ResponseHello_msg
#define ResponseTriggerTimeout_fields &ResponseTriggerTimeout_msg
#define ResponseADC_fields &ResponseADC_msg
#define ResponseInfo_fields &ResponseInfo_msg
#define ResponseSWDCheck_fields &ResponseSWDCheck_msg
#define Response_fields &Response_msg

/* Maximum encoded size of messages (where known) */
/* CaptureResponse_size depends on runtime parameters */
/* ResponseADC_size depends on runtime parameters */
/* Response_size depends on runtime parameters */
#define CommandCapture_size                      0
#define CommandConfigureADC_size                 13
#define CommandConfigureGlitcher_size            43
#define CommandGlitch_size                       0
#define CommandHello_size                        0
#define CommandReadADC_size                      0
#define CommandSWDCheck_size                     2
#define Command_size                             45
#define FAULTIER_PB_H_MAX_SIZE                   ResponseError_size
#define ResponseError_size                       51
#define ResponseHello_size                       2
#define ResponseInfo_size                        11
#define ResponseOk_size                          0
#define ResponseSWDCheck_size                    2
#define ResponseTriggerTimeout_size              0

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
